<!--

***********************************************************************************************

Microsoft.PowerApps.MSBuild.Solution.targets



WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have

          created a backup copy.  Incorrect changes to this file will make it

          impossible to load or build your projects from the command-line or the IDE.



This file defines the steps in the build process for Microsoft PowerApps Solution projects.

Copyright (C) Microsoft Corporation. All rights reserved.

***********************************************************************************************

-->
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!-- Moving these properties to props file doesn't evaluate the OutputPath & IntermediateOutputPath property after project evaluation 
       These properties should be moved to props file if this needs to be visible at design time.
  -->
  <PropertyGroup>
    <SolutionPackagerExePath Condition="'$(SolutionPackagerExePath)' == ''">$(MSBuildThisFileDirectory)..\content\</SolutionPackagerExePath>
    <SolutionPackageErrorLevel Condition="'$(SolutionPackageErrorLevel)' == ''">Info</SolutionPackageErrorLevel>
    <SolutionPackageEnableLocalization Condition="'$(SolutionPackageEnableLocalization)' == ''">false</SolutionPackageEnableLocalization>
    <SolutionPackagerWorkingDirectory Condition="'$(SolutionPackagerWorkingDirectory)' == ''">$(IntermediateOutputPath)</SolutionPackagerWorkingDirectory>
    <SolutionPackageLogFilePath Condition="'$(SolutionPackageLogFilePath)' == ''">$(OutputPath)SolutionPackager.log</SolutionPackageLogFilePath>
    <SolutionPackageZipFilePath Condition="'$(SolutionPackageZipFilePath)' == ''">$(OutputPath)$(MSBuildProjectName).zip</SolutionPackageZipFilePath>
    <SolutionPackageMapArgument Condition="'$(SolutionPackageMapFilePath)' != ''">/map:$(SolutionPackageMapFilePath)</SolutionPackageMapArgument>
    <SolutionPackageLocalizeArgument Condition="'$(SolutionPackageEnableLocalization)' == 'true'">/src /loc</SolutionPackageLocalizeArgument>
  </PropertyGroup>

  <!--The CreateManifestResourceNames target create the manifest resource names from the .RESX -->
  <Target Name="CreateManifestResourceNames" />
  <!-- Prevent Csc from being called -->
  <Target Name="CoreCompile" />
  <!-- Prevent copy of non-existent exe -->
  <Target Name="CopyFilesToOutputDirectory"/>

  <!-- 
    Project References are already built. Find the Output Path & Copy the output to Cds working directory 
    
    Allow all project types to be referenced from/to cdsproj. We don't block any project reference creation
    as it is also used to define build order sometime in a solution while running in VS.

    However, cdsproj would not process any project reference output that it doesn't understand. GetProjectOutputPath
    Target must be defined in each of the valid referenced projects
    Currently it understands pcfproj only.
  
  -->
  <Target Name="CopyCdsControlsProjectReferencesOutputs" BeforeTargets="CopyCdsSolutionContent">
    <ItemGroup>
      <PcfProjectReferences Include="@(ProjectReference)" Condition="'%(Extension)' == '.pcfproj'"/>
    </ItemGroup>

    <MSBuild Projects="@(PcfProjectReferences)" Targets="GetProjectOutputPath">
      <Output TaskParameter="TargetOutputs" ItemName="PcfReferenceCopyLocalPaths"/>
    </MSBuild>
  
    <ItemGroup>
      <SourceFiles Include="%(PcfReferenceCopyLocalPaths.FullPath)**\*.*"/>
    </ItemGroup>
  
    <PropertyGroup>
      <DestinationFilesPcf>$(SolutionPackagerWorkingDirectory)Controls\</DestinationFilesPcf>
    </PropertyGroup>

    <Copy SourceFiles="@(SourceFiles)" DestinationFiles="@(SourceFiles -> '$(DestinationFilesPcf)%(RecursiveDir)%(Filename)%(Extension)')"
          Condition="'@(PcfReferenceCopyLocalPaths)' != ''" />
  
  </Target>

  <Target Name="CopyCdsSolutionContent" BeforeTargets="MutateCdsSolutionAssets">
    <PropertyGroup>
      <SourceSolutionFilePath>$(MSBuildProjectDirectory)\**</SourceSolutionFilePath>
      <SolutionPackageLogPath>$([System.IO.Directory]::GetParent($(SolutionPackageLogFilePath)))</SolutionPackageLogPath>
      <SolutionPackageZipPath>$([System.IO.Directory]::GetParent($(SolutionPackageZipFilePath)))</SolutionPackageZipPath>
    </PropertyGroup>
    
    <ItemGroup>
      <ExcludeDirectories Include= "bin\**" />
      <ExcludeDirectories Include= "obj\**" />
      <ExcludeDirectories Include= "$(SolutionPackageZipPath)\**" />
      <ExcludeDirectories Include= "$(SolutionPackagerWorkingDirectory)\**" />
      <ExcludeDirectories Include= "$(SolutionPackageLogFilePath)\**" />
      <ExcludeDirectories Include= "*.cdsproj" />
    </ItemGroup>
    
    <ItemGroup>
      <SourceSolutionFiles Include="$(SourceSolutionFilePath)" Exclude="@(ExcludeDirectories)"/>
    </ItemGroup>
    
    <Copy SourceFiles="@(SourceSolutionFiles)" DestinationFiles="@(SourceSolutionFiles -> '$(SolutionPackagerWorkingDirectory)\%(RecursiveDir)%(Filename)%(Extension)')"/>
  
  </Target>
  
  <Target Name="MutateCdsSolutionAssets" BeforeTargets="PowerAppsPackage">
    <MutateCdsSolutionAssets WorkingDirectoryPath="$(SolutionPackagerWorkingDirectory)"/>
  </Target>

  <Target Name="PowerAppsPackage" AfterTargets="AfterBuild" >
    <Message Importance="High" Text="Running Solution Packager to build package type: $(SolutionPackageType) $(SolutionPackageZipFilePath)" />
    
    <Exec Command='$(SolutionPackagerExePath)SolutionPackager.exe /action:Pack /packagetype:$(SolutionPackageType) $(SolutionPackageMapArgument) /folder:$(SolutionPackagerWorkingDirectory) /zipfile:$(SolutionPackageZipFilePath) $(SolutionPackageLocalizeArgument) /errorlevel:$(SolutionPackageErrorLevel) /l:$(SolutionPackageLogFilePath)'
          WorkingDirectory="$(RunWorkingDirectory)"/>

    <Message Importance="High" Text="Solution: $(SolutionPackageZipFilePath) generated." />
    <Message Importance="High" Text="Solution Package Type: $(SolutionPackageType) generated." />
    <Message Importance="High" Text="Solution Packager log path: $(SolutionPackageLogFilePath)." /> 
    <Message Importance="High" Text="Solution Packager error level: $(SolutionPackageErrorLevel)." />
  </Target>

  <!-- Run this after core clean-->
  <Target Name="AfterClean">
    <PropertyGroup>
      <SolutionPackageManagedZipFilePath Condition="'$(SolutionPackageType)' == 'both'"> $(SolutionPackageZipFilePath.Replace(".zip","_managed.zip"))</SolutionPackageManagedZipFilePath>
    </PropertyGroup>

    <Message Importance="High" Text="Cleaning output directory: $(OutputPath), Intermediate directory: $(IntermediateOutputPath) and Solution Packager working directory: $(SolutionPackagerWorkingDirectory)" />
    
    <RemoveDir Directories="$(OutputPath); $(IntermediateOutputPath); $(SolutionPackagerWorkingDirectory)" ContinueOnError="WarnAndContinue" />

    <Message Importance="High" Text="Removing log file: $(SolutionPackageLogFilePath) and generated solution package: $(SolutionPackageZipFilePath)" />

    <Message Importance="High" Condition="'$(SolutionPackageManagedZipFilePath)' != ''" Text="Removing generated managed solution package: $(SolutionPackageManagedZipFilePath)" />

    <Delete Files="$(SolutionPackageLogFilePath); $(SolutionPackageZipFilePath); $(SolutionPackageManagedZipFilePath)" TreatErrorsAsWarnings="True" />
  </Target>

</Project>